#!/usr/bin/env python3
"""
3D Harita G√∂r√ºnt√ºleyici - Kurulum Scripti
"""

import sys
import subprocess
import os
from pathlib import Path

def check_python_version():
    """Python versiyonunu kontrol eder"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 veya √ºst√º gereklidir!")
        print(f"≈ûu anki versiyon: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} uygun")
    return True

def install_requirements():
    """Requirements.txt'den paketleri y√ºkler"""
    try:
        print("üì¶ Gerekli paketler y√ºkleniyor...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("‚úÖ T√ºm paketler ba≈üarƒ±yla y√ºklendi")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Paket y√ºkleme hatasƒ±: {e}")
        return False

def test_opengl():
    """OpenGL kurulumunu test eder"""
    try:
        print("üéÆ OpenGL test ediliyor...")
        import OpenGL.GL
        from PyQt6.QtOpenGL import QOpenGLWidget
        print("‚úÖ OpenGL kurulumu ba≈üarƒ±lƒ±")
        return True
    except ImportError as e:
        print(f"‚ùå OpenGL kurulum hatasƒ±: {e}")
        print("√á√∂z√ºm i√ßin README.md dosyasƒ±nƒ± kontrol edin")
        return False

def create_directories():
    """Gerekli dizinleri olu≈üturur"""
    dirs = ["cache"]
    for dir_name in dirs:
        Path(dir_name).mkdir(exist_ok=True)
        print(f"üìÅ {dir_name}/ dizini olu≈üturuldu")

def test_internet_connection():
    """ƒ∞nternet baƒülantƒ±sƒ±nƒ± test eder"""
    try:
        print("üåê ƒ∞nternet baƒülantƒ±sƒ± test ediliyor...")
        import requests
        response = requests.get("https://api.open-elevation.com/", timeout=5)
        print("‚úÖ ƒ∞nternet baƒülantƒ±sƒ± √ßalƒ±≈üƒ±yor")
        return True
    except:
        print("‚ö†Ô∏è  ƒ∞nternet baƒülantƒ±sƒ± yok - offline mod kullanƒ±lacak")
        return False

def run_demo():
    """Demo uygulamayƒ± √ßalƒ±≈ütƒ±rƒ±r"""
    try:
        print("üöÄ Demo uygulamasƒ± ba≈ülatƒ±lƒ±yor...")
        print("Uygulama a√ßƒ±ldƒ±ƒüƒ±nda varsayƒ±lan ƒ∞stanbul koordinatlarƒ± y√ºkl√º olacak.")
        print("'3D Haritayƒ± Y√ºkle' butonuna tƒ±klayarak test edebilirsiniz.")
        
        # Ana uygulamayƒ± import et ve √ßalƒ±≈ütƒ±r
        import main
        main.main()
        
    except KeyboardInterrupt:
        print("\nüëã Uygulama kapatƒ±ldƒ±")
    except Exception as e:
        print(f"‚ùå Uygulama ba≈ülatma hatasƒ±: {e}")

def main():
    """Ana kurulum fonksiyonu"""
    print("=" * 50)
    print("üó∫Ô∏è  3D Harita G√∂r√ºnt√ºleyici - Kurulum")
    print("=" * 50)
    
    # Sistem kontrolleri
    if not check_python_version():
        return
    
    # Paket kurulumu
    if not install_requirements():
        return
    
    # OpenGL testi
    if not test_opengl():
        return
    
    # Dizin olu≈üturma
    create_directories()
    
    # ƒ∞nternet testi
    test_internet_connection()
    
    print("\n" + "=" * 50)
    print("‚úÖ Kurulum tamamlandƒ±!")
    print("=" * 50)
    
    # Demo √ßalƒ±≈ütƒ±rma se√ßeneƒüi
    response = input("\nDemo uygulamasƒ±nƒ± ≈üimdi √ßalƒ±≈ütƒ±rmak ister misiniz? (e/h): ")
    if response.lower() in ['e', 'evet', 'y', 'yes']:
        run_demo()
    else:
        print("\nUygulamayƒ± manuel olarak √ßalƒ±≈ütƒ±rmak i√ßin:")
        print("python main.py")

if __name__ == "__main__":
    main()